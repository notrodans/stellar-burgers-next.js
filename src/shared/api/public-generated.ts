"use client";

/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Public API - Authentication and Ingredients
 * API endpoints that don't require authentication
 * OpenAPI spec version: 1.0.0
 */
import type { Key, SWRConfiguration } from "swr";
import useSwr from "swr";

import type { SWRMutationConfiguration } from "swr/mutation";
import useSWRMutation from "swr/mutation";

import type { BodyType, ErrorType } from "./api-instance";
import { createInstancePublic } from "./api-instance";
/**
 * Type of the ingredient
 */
export type IngredientType =
  (typeof IngredientType)[keyof typeof IngredientType];

export const IngredientType = {
  bun: "bun",
  sauce: "sauce",
  main: "main",
} as const;

export interface IngredientObject {
  _id: string;
  name: string;
  type: IngredientType;
  proteins: number;
  fat: number;
  carbohydrates: number;
  calories: number;
  price: number;
  image: string;
  image_mobile: string;
  image_large: string;
  __v: number;
  /** Optional unique identifier for frontend usage */
  uniqueId?: string;
}

export interface UserObject {
  email: string;
  name: string;
}

export interface LoginFormDataDto {
  email: string;
  password: string;
}

export type UserObjectWithPasswordDtoAllOf = {
  password: string;
};

export type UserObjectWithPasswordDto = UserObject &
  UserObjectWithPasswordDtoAllOf;

export interface PasswordWithToken {
  password: string;
  token: string;
}

export interface TokenObjectDto {
  success: boolean;
  accessToken: string;
  refreshToken: string;
}

export interface RefreshTokenRequest {
  /** Valid refresh token */
  token: string;
}

export type UserWithTokensAllOf = {
  user: UserObject;
};

export type UserWithTokens = TokenObjectDto & UserWithTokensAllOf;

export type DetailedOrderObjectStatus =
  (typeof DetailedOrderObjectStatus)[keyof typeof DetailedOrderObjectStatus];

export const DetailedOrderObjectStatus = {
  done: "done",
  pending: "pending",
  created: "created",
} as const;

export interface DetailedOrderObject {
  ingredients: string[];
  _id: string;
  name: string;
  status: DetailedOrderObjectStatus;
  number: number;
  createdAt: string;
  updatedAt: string;
}

export type GetIngredients200 = {
  success: boolean;
  data: IngredientObject[];
};

export type PostAuthLogin200AllOf = {
  success?: boolean;
};

export type PostAuthLogin200 = UserWithTokens &
  PostAuthLogin200AllOf &
  Required<Pick<UserWithTokens & PostAuthLogin200AllOf, "success">>;

export type PostAuthRegister200AllOf = {
  success?: boolean;
};

export type PostAuthRegister200 = UserWithTokens &
  PostAuthRegister200AllOf &
  Required<Pick<UserWithTokens & PostAuthRegister200AllOf, "success">>;

export type PostAuthToken200AllOf = {
  success?: boolean;
};

export type PostAuthToken200 = TokenObjectDto & PostAuthToken200AllOf;

export type PostAuthLogoutBody = {
  token: string;
};

export type PostAuthLogout200 = {
  success: boolean;
  message: string;
};

export type PostPasswordResetBody = {
  email: string;
};

export type PostPasswordReset200 = {
  success: boolean;
  message: string;
};

export type PostPasswordResetReset200 = {
  success: boolean;
  message: string;
};

export type GetOrdersAll200 = {
  success: boolean;
  orders: DetailedOrderObject[];
  total: number;
  totalToday: number;
};

export type GetOrdersId200 = {
  success: boolean;
  orders: DetailedOrderObject[];
};

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get list of all available ingredients
 */
export const getIngredients = (
  options?: SecondParameter<typeof createInstancePublic>,
) => {
  return createInstancePublic<GetIngredients200>(
    { url: `/ingredients`, method: "GET" },
    options,
  );
};

export const getGetIngredientsKey = () => [`/ingredients`] as const;

export type GetIngredientsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getIngredients>>
>;
export type GetIngredientsQueryError = ErrorType<unknown>;

/**
 * @summary Get list of all available ingredients
 */
export const useGetIngredients = <TError = ErrorType<unknown>>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getIngredients>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
  request?: SecondParameter<typeof createInstancePublic>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetIngredientsKey() : null));
  const swrFn = () => getIngredients(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary User login
 */
export const postAuthLogin = (
  loginFormDataDto: BodyType<LoginFormDataDto>,
  options?: SecondParameter<typeof createInstancePublic>,
) => {
  return createInstancePublic<PostAuthLogin200>(
    {
      url: `/auth/login`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: loginFormDataDto,
    },
    options,
  );
};

export const getPostAuthLoginMutationFetcher = (
  options?: SecondParameter<typeof createInstancePublic>,
) => {
  return (
    _: Key,
    { arg }: { arg: LoginFormDataDto },
  ): Promise<PostAuthLogin200> => {
    return postAuthLogin(arg, options);
  };
};
export const getPostAuthLoginMutationKey = () => [`/auth/login`] as const;

export type PostAuthLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthLogin>>
>;
export type PostAuthLoginMutationError = ErrorType<unknown>;

/**
 * @summary User login
 */
export const usePostAuthLogin = <TError = ErrorType<unknown>>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof postAuthLogin>>,
    TError,
    Key,
    LoginFormDataDto,
    Awaited<ReturnType<typeof postAuthLogin>>
  > & { swrKey?: string };
  request?: SecondParameter<typeof createInstancePublic>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPostAuthLoginMutationKey();
  const swrFn = getPostAuthLoginMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Register new user
 */
export const postAuthRegister = (
  userObjectWithPasswordDto: BodyType<UserObjectWithPasswordDto>,
  options?: SecondParameter<typeof createInstancePublic>,
) => {
  return createInstancePublic<PostAuthRegister200>(
    {
      url: `/auth/register`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: userObjectWithPasswordDto,
    },
    options,
  );
};

export const getPostAuthRegisterMutationFetcher = (
  options?: SecondParameter<typeof createInstancePublic>,
) => {
  return (
    _: Key,
    { arg }: { arg: UserObjectWithPasswordDto },
  ): Promise<PostAuthRegister200> => {
    return postAuthRegister(arg, options);
  };
};
export const getPostAuthRegisterMutationKey = () => [`/auth/register`] as const;

export type PostAuthRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthRegister>>
>;
export type PostAuthRegisterMutationError = ErrorType<unknown>;

/**
 * @summary Register new user
 */
export const usePostAuthRegister = <TError = ErrorType<unknown>>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof postAuthRegister>>,
    TError,
    Key,
    UserObjectWithPasswordDto,
    Awaited<ReturnType<typeof postAuthRegister>>
  > & { swrKey?: string };
  request?: SecondParameter<typeof createInstancePublic>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPostAuthRegisterMutationKey();
  const swrFn = getPostAuthRegisterMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Refresh access token
 */
export const postAuthToken = (
  refreshTokenRequest: BodyType<RefreshTokenRequest>,
  options?: SecondParameter<typeof createInstancePublic>,
) => {
  return createInstancePublic<PostAuthToken200>(
    {
      url: `/auth/token`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: refreshTokenRequest,
    },
    options,
  );
};

export const getPostAuthTokenMutationFetcher = (
  options?: SecondParameter<typeof createInstancePublic>,
) => {
  return (
    _: Key,
    { arg }: { arg: RefreshTokenRequest },
  ): Promise<PostAuthToken200> => {
    return postAuthToken(arg, options);
  };
};
export const getPostAuthTokenMutationKey = () => [`/auth/token`] as const;

export type PostAuthTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthToken>>
>;
export type PostAuthTokenMutationError = ErrorType<unknown>;

/**
 * @summary Refresh access token
 */
export const usePostAuthToken = <TError = ErrorType<unknown>>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof postAuthToken>>,
    TError,
    Key,
    RefreshTokenRequest,
    Awaited<ReturnType<typeof postAuthToken>>
  > & { swrKey?: string };
  request?: SecondParameter<typeof createInstancePublic>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPostAuthTokenMutationKey();
  const swrFn = getPostAuthTokenMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary User logout
 */
export const postAuthLogout = (
  postAuthLogoutBody: BodyType<PostAuthLogoutBody>,
  options?: SecondParameter<typeof createInstancePublic>,
) => {
  return createInstancePublic<PostAuthLogout200>(
    {
      url: `/auth/logout`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postAuthLogoutBody,
    },
    options,
  );
};

export const getPostAuthLogoutMutationFetcher = (
  options?: SecondParameter<typeof createInstancePublic>,
) => {
  return (
    _: Key,
    { arg }: { arg: PostAuthLogoutBody },
  ): Promise<PostAuthLogout200> => {
    return postAuthLogout(arg, options);
  };
};
export const getPostAuthLogoutMutationKey = () => [`/auth/logout`] as const;

export type PostAuthLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthLogout>>
>;
export type PostAuthLogoutMutationError = ErrorType<unknown>;

/**
 * @summary User logout
 */
export const usePostAuthLogout = <TError = ErrorType<unknown>>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof postAuthLogout>>,
    TError,
    Key,
    PostAuthLogoutBody,
    Awaited<ReturnType<typeof postAuthLogout>>
  > & { swrKey?: string };
  request?: SecondParameter<typeof createInstancePublic>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPostAuthLogoutMutationKey();
  const swrFn = getPostAuthLogoutMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Request password reset
 */
export const postPasswordReset = (
  postPasswordResetBody: BodyType<PostPasswordResetBody>,
  options?: SecondParameter<typeof createInstancePublic>,
) => {
  return createInstancePublic<PostPasswordReset200>(
    {
      url: `/password-reset`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postPasswordResetBody,
    },
    options,
  );
};

export const getPostPasswordResetMutationFetcher = (
  options?: SecondParameter<typeof createInstancePublic>,
) => {
  return (
    _: Key,
    { arg }: { arg: PostPasswordResetBody },
  ): Promise<PostPasswordReset200> => {
    return postPasswordReset(arg, options);
  };
};
export const getPostPasswordResetMutationKey = () =>
  [`/password-reset`] as const;

export type PostPasswordResetMutationResult = NonNullable<
  Awaited<ReturnType<typeof postPasswordReset>>
>;
export type PostPasswordResetMutationError = ErrorType<unknown>;

/**
 * @summary Request password reset
 */
export const usePostPasswordReset = <TError = ErrorType<unknown>>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof postPasswordReset>>,
    TError,
    Key,
    PostPasswordResetBody,
    Awaited<ReturnType<typeof postPasswordReset>>
  > & { swrKey?: string };
  request?: SecondParameter<typeof createInstancePublic>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPostPasswordResetMutationKey();
  const swrFn = getPostPasswordResetMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Reset password with token
 */
export const postPasswordResetReset = (
  passwordWithToken: BodyType<PasswordWithToken>,
  options?: SecondParameter<typeof createInstancePublic>,
) => {
  return createInstancePublic<PostPasswordResetReset200>(
    {
      url: `/password-reset/reset`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: passwordWithToken,
    },
    options,
  );
};

export const getPostPasswordResetResetMutationFetcher = (
  options?: SecondParameter<typeof createInstancePublic>,
) => {
  return (
    _: Key,
    { arg }: { arg: PasswordWithToken },
  ): Promise<PostPasswordResetReset200> => {
    return postPasswordResetReset(arg, options);
  };
};
export const getPostPasswordResetResetMutationKey = () =>
  [`/password-reset/reset`] as const;

export type PostPasswordResetResetMutationResult = NonNullable<
  Awaited<ReturnType<typeof postPasswordResetReset>>
>;
export type PostPasswordResetResetMutationError = ErrorType<unknown>;

/**
 * @summary Reset password with token
 */
export const usePostPasswordResetReset = <
  TError = ErrorType<unknown>,
>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof postPasswordResetReset>>,
    TError,
    Key,
    PasswordWithToken,
    Awaited<ReturnType<typeof postPasswordResetReset>>
  > & { swrKey?: string };
  request?: SecondParameter<typeof createInstancePublic>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPostPasswordResetResetMutationKey();
  const swrFn = getPostPasswordResetResetMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Get all orders (public feed)
 */
export const getOrdersAll = (
  options?: SecondParameter<typeof createInstancePublic>,
) => {
  return createInstancePublic<GetOrdersAll200>(
    { url: `/orders/all`, method: "GET" },
    options,
  );
};

export const getGetOrdersAllKey = () => [`/orders/all`] as const;

export type GetOrdersAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOrdersAll>>
>;
export type GetOrdersAllQueryError = ErrorType<unknown>;

/**
 * @summary Get all orders (public feed)
 */
export const useGetOrdersAll = <TError = ErrorType<unknown>>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getOrdersAll>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
  request?: SecondParameter<typeof createInstancePublic>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetOrdersAllKey() : null));
  const swrFn = () => getOrdersAll(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Get order details by ID
 */
export const getOrdersId = (
  id: string,
  options?: SecondParameter<typeof createInstancePublic>,
) => {
  return createInstancePublic<GetOrdersId200>(
    { url: `/orders/${id}`, method: "GET" },
    options,
  );
};

export const getGetOrdersIdKey = (id: string) => [`/orders/${id}`] as const;

export type GetOrdersIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOrdersId>>
>;
export type GetOrdersIdQueryError = ErrorType<unknown>;

/**
 * @summary Get order details by ID
 */
export const useGetOrdersId = <TError = ErrorType<unknown>>(
  id: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getOrdersId>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    request?: SecondParameter<typeof createInstancePublic>;
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!id;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetOrdersIdKey(id) : null));
  const swrFn = () => getOrdersId(id, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
