/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Full API - Users, Sessions and Burgers))
 * OpenAPI spec version: 1.0.0
 */
import { createInstance } from "./api-instance";
import type { BodyType } from "./api-instance";
/**
 * Type of the ingredient
 */
export type IngredientType =
  (typeof IngredientType)[keyof typeof IngredientType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IngredientType = {
  bun: "bun",
  sauce: "sauce",
  main: "main",
} as const;

export interface IngredientObjectDto {
  _id: string;
  name: string;
  type: IngredientType;
  proteins: number;
  fat: number;
  carbohydrates: number;
  calories: number;
  price: number;
  image: string;
  image_mobile: string;
  image_large: string;
  __v: number;
  /** Optional unique identifier for frontend usage */
  uniqueId?: string;
}

export interface UserObjectDto {
  email: string;
  name: string;
}

export interface LoginFormDataDto {
  email: string;
  password: string;
}

export type UserObjectWithPasswordDtoAllOf = {
  password: string;
};

export type UserObjectWithPasswordDto = UserObjectDto &
  UserObjectWithPasswordDtoAllOf;

export interface PasswordWithToken {
  password: string;
  token: string;
}

export interface TokenObjectDto {
  accessToken: string;
  refreshToken: string;
}

export interface RefreshTokenRequest {
  /** Valid refresh token */
  token: string;
}

export type UserWithTokensDtoAllOf = {
  user: UserObjectDto;
};

export type UserWithTokensDto = TokenObjectDto & UserWithTokensDtoAllOf;

export type OrderObjectDtoOrder = {
  number: number;
};

export interface OrderObjectDto {
  name: string;
  order: OrderObjectDtoOrder;
}

export type DetailedOrderObjectDtoStatus =
  (typeof DetailedOrderObjectDtoStatus)[keyof typeof DetailedOrderObjectDtoStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DetailedOrderObjectDtoStatus = {
  done: "done",
  pending: "pending",
  created: "created",
} as const;

export interface DetailedOrderObjectDto {
  ingredients: string[];
  _id: string;
  name: string;
  status: DetailedOrderObjectDtoStatus;
  number: number;
  createdAt: string;
  updatedAt: string;
}

/**
 * Unique identifier for order
 */
export type OrderID = string;

/**
 * ISO 8601 timestamp
 */
export type Timestamp = string;

/**
 * Reference to ingredient
 */
export type IngredientID = string;

/**
 * Error response
 */
export interface ApiError {
  success?: boolean;
  message: string;
}

export type GetIngredients200 = {
  success: boolean;
  data: IngredientObjectDto[];
};

export type GetAuthUser200 = {
  user: UserObjectDto;
};

export type PatchAuthUser200 = {
  user: UserObjectDto;
};

export type PostAuthLogoutBody = {
  token: string;
};

export type PostAuthLogout200 = {
  message: string;
};

export type PostPasswordResetBody = {
  email: string;
};

export type PostPasswordReset200 = {
  message: string;
};

export type PostPasswordResetReset200 = {
  message: string;
};

export type PostOrdersBody = {
  ingredients: string[];
};

export type GetOrdersId200 = {
  orders: DetailedOrderObjectDto[];
};

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get list of all available ingredients
 */
export const getIngredients = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetIngredients200>(
    { url: `/ingredients`, method: "GET" },
    options,
  );
};

/**
 * @summary Get current user data
 */
export const getAuthUser = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetAuthUser200>(
    { url: `/auth/user`, method: "GET" },
    options,
  );
};

/**
 * @summary Update user data
 */
export const patchAuthUser = (
  userObjectWithPasswordDto: BodyType<UserObjectWithPasswordDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<PatchAuthUser200>(
    {
      url: `/auth/user`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: userObjectWithPasswordDto,
    },
    options,
  );
};

/**
 * @summary User login
 */
export const postAuthLogin = (
  loginFormDataDto: BodyType<LoginFormDataDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<UserWithTokensDto>(
    {
      url: `/auth/login`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: loginFormDataDto,
    },
    options,
  );
};

/**
 * @summary Register new user
 */
export const postAuthRegister = (
  userObjectWithPasswordDto: BodyType<UserObjectWithPasswordDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<UserWithTokensDto>(
    {
      url: `/auth/register`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: userObjectWithPasswordDto,
    },
    options,
  );
};

/**
 * @summary User logout
 */
export const postAuthLogout = (
  postAuthLogoutBody: BodyType<PostAuthLogoutBody>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<PostAuthLogout200>(
    {
      url: `/auth/logout`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postAuthLogoutBody,
    },
    options,
  );
};

/**
 * Exchange refresh token for new access token
 * @summary Refresh access token
 */
export const postAuthToken = (
  refreshTokenRequest: BodyType<RefreshTokenRequest>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<TokenObjectDto>(
    {
      url: `/auth/token`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: refreshTokenRequest,
    },
    options,
  );
};

/**
 * @summary Request password reset
 */
export const postPasswordReset = (
  postPasswordResetBody: BodyType<PostPasswordResetBody>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<PostPasswordReset200>(
    {
      url: `/password-reset`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postPasswordResetBody,
    },
    options,
  );
};

/**
 * @summary Reset password with token
 */
export const postPasswordResetReset = (
  passwordWithToken: BodyType<PasswordWithToken>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<PostPasswordResetReset200>(
    {
      url: `/password-reset/reset`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: passwordWithToken,
    },
    options,
  );
};

/**
 * @summary Create new order
 */
export const postOrders = (
  postOrdersBody: BodyType<PostOrdersBody>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<OrderObjectDto>(
    {
      url: `/orders`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postOrdersBody,
    },
    options,
  );
};

/**
 * @summary Get order details by ID
 */
export const getOrdersId = (
  id: string,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetOrdersId200>(
    { url: `/orders/${id}`, method: "GET" },
    options,
  );
};

export type GetIngredientsResult = NonNullable<
  Awaited<ReturnType<typeof getIngredients>>
>;
export type GetAuthUserResult = NonNullable<
  Awaited<ReturnType<typeof getAuthUser>>
>;
export type PatchAuthUserResult = NonNullable<
  Awaited<ReturnType<typeof patchAuthUser>>
>;
export type PostAuthLoginResult = NonNullable<
  Awaited<ReturnType<typeof postAuthLogin>>
>;
export type PostAuthRegisterResult = NonNullable<
  Awaited<ReturnType<typeof postAuthRegister>>
>;
export type PostAuthLogoutResult = NonNullable<
  Awaited<ReturnType<typeof postAuthLogout>>
>;
export type PostAuthTokenResult = NonNullable<
  Awaited<ReturnType<typeof postAuthToken>>
>;
export type PostPasswordResetResult = NonNullable<
  Awaited<ReturnType<typeof postPasswordReset>>
>;
export type PostPasswordResetResetResult = NonNullable<
  Awaited<ReturnType<typeof postPasswordResetReset>>
>;
export type PostOrdersResult = NonNullable<
  Awaited<ReturnType<typeof postOrders>>
>;
export type GetOrdersIdResult = NonNullable<
  Awaited<ReturnType<typeof getOrdersId>>
>;
