"use client";
/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Private API - User and Orders
 * API endpoints that require authentication
 * OpenAPI spec version: 1.0.0
 */
import useSwr from "swr";
import type { Key, SWRConfiguration } from "swr";

import useSWRMutation from "swr/mutation";
import type { SWRMutationConfiguration } from "swr/mutation";

import { createInstancePrivate } from "./api-instance";
import type { ErrorType, BodyType } from "./api-instance";
export interface UserObject {
  email: string;
  name: string;
}

export interface TokenObjectDto {
  success: boolean;
  accessToken: string;
  refreshToken: string;
}

export type OrderObjectOrder = {
  number: number;
};

export interface OrderObject {
  name: string;
  order: OrderObjectOrder;
}

export type DetailedOrderObjectStatus =
  (typeof DetailedOrderObjectStatus)[keyof typeof DetailedOrderObjectStatus];

export const DetailedOrderObjectStatus = {
  done: "done",
  pending: "pending",
  created: "created",
} as const;

export interface DetailedOrderObject {
  ingredients: string[];
  _id: string;
  name: string;
  status: DetailedOrderObjectStatus;
  number: number;
  createdAt: string;
  updatedAt: string;
}

export type GetAuthUser200 = {
  success: boolean;
  user: UserObject;
};

export type PatchAuthUser200 = {
  success: boolean;
  user: UserObject;
};

export type GetOrders200 = {
  success: boolean;
  orders: DetailedOrderObject[];
  total: number;
  totalToday: number;
};

export type PostOrdersBody = {
  ingredients: string[];
};

export type PostOrders200AllOf = {
  name?: string;
  success: boolean;
};

export type PostOrders200 = OrderObject & PostOrders200AllOf;

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get current user data
 */
export const getAuthUser = (
  options?: SecondParameter<typeof createInstancePrivate>,
) => {
  return createInstancePrivate<GetAuthUser200>(
    { url: `/auth/user`, method: "GET" },
    options,
  );
};

export const getGetAuthUserKey = () => [`/auth/user`] as const;

export type GetAuthUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAuthUser>>
>;
export type GetAuthUserQueryError = ErrorType<unknown>;

/**
 * @summary Get current user data
 */
export const useGetAuthUser = <TError = ErrorType<unknown>>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getAuthUser>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
  request?: SecondParameter<typeof createInstancePrivate>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetAuthUserKey() : null));
  const swrFn = () => getAuthUser(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Update user data
 */
export const patchAuthUser = (
  userObject: BodyType<UserObject>,
  options?: SecondParameter<typeof createInstancePrivate>,
) => {
  return createInstancePrivate<PatchAuthUser200>(
    {
      url: `/auth/user`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: userObject,
    },
    options,
  );
};

export const getPatchAuthUserMutationFetcher = (
  options?: SecondParameter<typeof createInstancePrivate>,
) => {
  return (_: Key, { arg }: { arg: UserObject }): Promise<PatchAuthUser200> => {
    return patchAuthUser(arg, options);
  };
};
export const getPatchAuthUserMutationKey = () => [`/auth/user`] as const;

export type PatchAuthUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchAuthUser>>
>;
export type PatchAuthUserMutationError = ErrorType<unknown>;

/**
 * @summary Update user data
 */
export const usePatchAuthUser = <TError = ErrorType<unknown>>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof patchAuthUser>>,
    TError,
    Key,
    UserObject,
    Awaited<ReturnType<typeof patchAuthUser>>
  > & { swrKey?: string };
  request?: SecondParameter<typeof createInstancePrivate>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPatchAuthUserMutationKey();
  const swrFn = getPatchAuthUserMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Get user orders
 */
export const getOrders = (
  options?: SecondParameter<typeof createInstancePrivate>,
) => {
  return createInstancePrivate<GetOrders200>(
    { url: `/orders`, method: "GET" },
    options,
  );
};

export const getGetOrdersKey = () => [`/orders`] as const;

export type GetOrdersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOrders>>
>;
export type GetOrdersQueryError = ErrorType<unknown>;

/**
 * @summary Get user orders
 */
export const useGetOrders = <TError = ErrorType<unknown>>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getOrders>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
  request?: SecondParameter<typeof createInstancePrivate>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetOrdersKey() : null));
  const swrFn = () => getOrders(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Create new order
 */
export const postOrders = (
  postOrdersBody: BodyType<PostOrdersBody>,
  options?: SecondParameter<typeof createInstancePrivate>,
) => {
  return createInstancePrivate<PostOrders200>(
    {
      url: `/orders`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postOrdersBody,
    },
    options,
  );
};

export const getPostOrdersMutationFetcher = (
  options?: SecondParameter<typeof createInstancePrivate>,
) => {
  return (_: Key, { arg }: { arg: PostOrdersBody }): Promise<PostOrders200> => {
    return postOrders(arg, options);
  };
};
export const getPostOrdersMutationKey = () => [`/orders`] as const;

export type PostOrdersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postOrders>>
>;
export type PostOrdersMutationError = ErrorType<unknown>;

/**
 * @summary Create new order
 */
export const usePostOrders = <TError = ErrorType<unknown>>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof postOrders>>,
    TError,
    Key,
    PostOrdersBody,
    Awaited<ReturnType<typeof postOrders>>
  > & { swrKey?: string };
  request?: SecondParameter<typeof createInstancePrivate>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPostOrdersMutationKey();
  const swrFn = getPostOrdersMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
